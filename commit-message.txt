feat: Implement full Update Post functionality with modal-based inline editing

🔧 Backend:
- Added `modules/posts/update.php` with secure update logic:
  • Validates POST method and CSRF token
  • Handles image replacement (upload + delete old)
  • Regenerates unique slug if title is changed
  • Uses prepared statements for DB safety
  • Logs errors with `PDOException` fallback
  • Future-ready for session-based user ownership

🧩 Frontend:
- Introduced `edit-post-modal.php` modal UI (modular, reusable)
- Responsive form with fields: title, content, image, category, status
- Includes dynamic data injection via JS from `/api/posts-api.php?id=...`
- AJAX-based submit to `update.php` (no reload, instant UX)

🎨 UI/UX Enhancements:
- Edit button triggers modal with data pre-filled
- Enhanced animations (fade, scale, slide-up)
- Live image preview with fallback if none present
- Clear success/failure messages post submission

📁 JS Integration:
- `public/assets/js/components/posts-crud.js`: handles modal open/load
- `create-post-modal.js`: refactored for shared use (create & edit)
- Added `removePreview()` utility (future use for image gallery update)

🚀 Future-Ready:
- Supports image validations, WYSIWYG editor integration
- Placeholder for tags, multi-category, AI-assist extensions
- Modular structure for easy reuse across dashboard/pages

#post-update #ajax-edit #modal-ui #csrf #image-handling #secure-update
- Even if update operation is not working BECAUSE backend is not fully ready and Database is not ready for Update Operation ,but its building block is generated so I can jump back to it to fix it. Now I want to move forward fast.
