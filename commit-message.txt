feat: Dynamic Post Loading via AJAX with DB Integration + Error Fixes

- Replaced static post rendering with dynamic fetch using JS (posts-loader.js)
- Implemented renderPostCard() with Tailwind UI matching post-card.php
- Added escapeHTML() to protect against XSS in dynamic content
- Setup AJAX request to /modules/posts/read.php with pagination (limit/offset)
- read.php: added support for filters (category, status, search, sort)
- Joined posts with users table to fetch author name
- Added fallback values: default image, excerpt preview, formatted date
- Updated DB: added 'excerpt' column (VARCHAR), confirmed required fields
- Fixed SQL errors from missing columns (description, category, tags, etc.)
- Switched to prepared statements for security
- Output structured as { success, count, posts[] }
- Future-ready UI: includes Edit/Delete buttons with data-id attributes
- Fully responsive, secure, scalable, and industry-level code".

🎯 Summary
Transitioned homepage post section from static HTML to fully dynamic post rendering

Implemented AJAX-based loading with graceful UI feedback

Fetched posts from MySQL using prepared PDO queries

Resolved multiple data and UI mismatches by aligning backend, DB, and frontend

💻 Frontend (JavaScript + UI)
Replaced hardcoded post cards with renderPostCard(post) JavaScript function

Implemented lazy-loading of posts with offset + limit using a Load More button

Added DOM fallback in case no posts match the filter or DB fails

Used TailwindCSS classes with animation + transitions for UI consistency

All post content now renders from backend (id, title, excerpt, image, author, views, etc.)

Used escapeHTML() to prevent XSS in titles, excerpts, and authors

default image logic added if post image is missing

🧠 Backend (PHP / read.php)
Created a robust read.php handler to respond with posts in JSON

Used safe prepared statements via $pdo->prepare to avoid SQL injection

Allowed optional query filters:

category, status, search, sort, limit, offset

Default sort: newest, with support for popular, oldest

Joined users table to fetch post author

Added computed fields in output:

formatted_date (M d, Y)

short_desc (via excerpt fallback)

🛠️ Database Changes
✅ Added excerpt column (VARCHAR(255)) to posts table for search/display optimization

✅ Ensured status, category, tags, likes, views, and published columns exist

✅ Updated DB structure to match code — including:

content for long-format display

excerpt for previews

description kept for compatibility (optional)

✅ Ensured image paths are correct and default fallback is used if none present



🐞 Error Handling + Debugging
Issue	Cause	Resolution
❌ description not found	Field removed from DB	Replaced with excerpt
❌ status, tags, category undefined	Missing or renamed columns	Added to DB with correct types
❌ posts.description in search caused SQL error	Invalid field in WHERE	Updated LIKE clauses to use excerpt
❌ Posts not rendering on frontend	JS expected posts[], but read.php used posts: [...] inside a wrapper	Updated JS to access data.posts properly
❌ Default images not shown	Some posts had no image	Fallback logic added in both PHP and JS
❌ XSS possible in post content	Direct HTML injection risk	Used escapeHTML() in JS and htmlspecialchars() in PHP

🔐 Security Considerations
All user inputs are sanitized using trim() and validated before use

All SQL queries are prepared statements (safe from injection)

All output in frontend is escaped to prevent XSS attacks

Proper fallback UI included if no posts match or query fails

📈 Performance & Scalability
Uses LIMIT + OFFSET for paginated loading

Ready for infinite scroll, filters, or sort options in future

Highly scalable: Fetches only what is needed, avoids overfetching

Fast load: Only static HTML is rendered initially, posts are injected asynchronously

🌐 Future-Proofing
Post actions (Edit/Delete) buttons already wired with data-id and event classes

Future support planned for:

Sorting by views/likes

Filtering by tags/category/status

Pagination UI

Post search (already in place via ?search= param)

Modular structure: Separated components, reusable post card logic

📁 Files Modified
File	Summary
/modules/posts/read.php	Backend post fetch with filters and JSON output
/public/assets/js/posts-loader.js	JS logic to fetch and render posts dynamically
/components/post-card.php	Used as base design reference
Database: posts	Added excerpt, status, category, likes, tags, views

✅ Final Outcome
Posts now load dynamically using AJAX

Uses a fast, secure, and scalable architecture

Fully matches your project constraints:

Advanced, fast-loading, responsive, secure, scalable, and ready for future backend/UX features

